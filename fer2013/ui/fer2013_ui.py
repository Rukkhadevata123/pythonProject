# Form implementation generated from reading ui file 'ui/fer2013_ui.ui'
#
# Created by: PyQt6 UI code generator 6.4.2
#
# WARNING: Any manual changes made to this file will be lost when pyuic6 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt6 import QtCore, QtGui, QtWidgets


class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(1250, 728)
        MainWindow.setUnifiedTitleAndToolBarOnMac(False)
        self.centralwidget = QtWidgets.QWidget(parent=MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.cur_model_box = QtWidgets.QGroupBox(parent=self.centralwidget)
        self.cur_model_box.setGeometry(QtCore.QRect(600, 20, 591, 281))
        self.cur_model_box.setObjectName("cur_model_box")
        self.cur_model = QtWidgets.QTextEdit(parent=self.cur_model_box)
        self.cur_model.setGeometry(QtCore.QRect(10, 40, 571, 221))
        self.cur_model.setReadOnly(True)
        self.cur_model.setObjectName("cur_model")
        self.model_box = QtWidgets.QGroupBox(parent=self.centralwidget)
        self.model_box.setGeometry(QtCore.QRect(60, 20, 251, 281))
        self.model_box.setObjectName("model_box")
        self.comboBox = QtWidgets.QComboBox(parent=self.model_box)
        self.comboBox.setGeometry(QtCore.QRect(20, 30, 81, 27))
        self.comboBox.setObjectName("comboBox")
        self.comboBox.addItem("")
        self.comboBox.addItem("")
        self.comboBox.addItem("")
        self.comboBox.addItem("")
        self.comboBox.addItem("")
        self.comboBox.addItem("")
        self.comboBox.addItem("")
        self.comboBox.addItem("")
        self.textEdit = QtWidgets.QTextEdit(parent=self.model_box)
        self.textEdit.setGeometry(QtCore.QRect(20, 70, 201, 171))
        self.textEdit.setReadOnly(True)
        self.textEdit.setObjectName("textEdit")
        self.framework = QtWidgets.QGroupBox(parent=self.centralwidget)
        self.framework.setGeometry(QtCore.QRect(60, 310, 151, 171))
        self.framework.setObjectName("framework")
        self.pytorch = QtWidgets.QRadioButton(parent=self.framework)
        self.pytorch.setGeometry(QtCore.QRect(10, 40, 111, 25))
        self.pytorch.setChecked(True)
        self.pytorch.setObjectName("pytorch")
        self.tensorflow = QtWidgets.QRadioButton(parent=self.framework)
        self.tensorflow.setGeometry(QtCore.QRect(10, 70, 111, 25))
        self.tensorflow.setObjectName("tensorflow")
        self.paddlepaddle = QtWidgets.QRadioButton(parent=self.framework)
        self.paddlepaddle.setGeometry(QtCore.QRect(10, 100, 111, 25))
        self.paddlepaddle.setObjectName("paddlepaddle")
        self.label = QtWidgets.QLabel(parent=self.framework)
        self.label.setGeometry(QtCore.QRect(30, 130, 101, 21))
        self.label.setObjectName("label")
        self.optimizer = QtWidgets.QGroupBox(parent=self.centralwidget)
        self.optimizer.setGeometry(QtCore.QRect(60, 490, 151, 201))
        self.optimizer.setObjectName("optimizer")
        self.adam = QtWidgets.QRadioButton(parent=self.optimizer)
        self.adam.setGeometry(QtCore.QRect(10, 40, 111, 25))
        self.adam.setChecked(True)
        self.adam.setObjectName("adam")
        self.adam8 = QtWidgets.QRadioButton(parent=self.optimizer)
        self.adam8.setGeometry(QtCore.QRect(10, 70, 111, 25))
        self.adam8.setObjectName("adam8")
        self.sgd = QtWidgets.QRadioButton(parent=self.optimizer)
        self.sgd.setGeometry(QtCore.QRect(10, 100, 111, 25))
        self.sgd.setObjectName("sgd")
        self.adagrad = QtWidgets.QRadioButton(parent=self.optimizer)
        self.adagrad.setGeometry(QtCore.QRect(10, 130, 111, 25))
        self.adagrad.setObjectName("adagrad")
        self.momentum = QtWidgets.QRadioButton(parent=self.optimizer)
        self.momentum.setGeometry(QtCore.QRect(10, 160, 131, 25))
        self.momentum.setObjectName("momentum")
        self.hyper_param = QtWidgets.QGroupBox(parent=self.centralwidget)
        self.hyper_param.setGeometry(QtCore.QRect(240, 310, 251, 171))
        self.hyper_param.setObjectName("hyper_param")
        self.lr_text = QtWidgets.QLineEdit(parent=self.hyper_param)
        self.lr_text.setGeometry(QtCore.QRect(100, 40, 91, 30))
        self.lr_text.setObjectName("lr_text")
        self.learning_rate = QtWidgets.QLabel(parent=self.hyper_param)
        self.learning_rate.setGeometry(QtCore.QRect(20, 40, 51, 30))
        self.learning_rate.setObjectName("learning_rate")
        self.resume_lr = QtWidgets.QPushButton(parent=self.hyper_param)
        self.resume_lr.setGeometry(QtCore.QRect(200, 40, 31, 30))
        self.resume_lr.setObjectName("resume_lr")
        self.batch = QtWidgets.QLabel(parent=self.hyper_param)
        self.batch.setGeometry(QtCore.QRect(20, 80, 71, 30))
        self.batch.setObjectName("batch")
        self.batch_text = QtWidgets.QLineEdit(parent=self.hyper_param)
        self.batch_text.setGeometry(QtCore.QRect(100, 80, 91, 30))
        self.batch_text.setObjectName("batch_text")
        self.resume_batch = QtWidgets.QPushButton(parent=self.hyper_param)
        self.resume_batch.setGeometry(QtCore.QRect(200, 80, 31, 30))
        self.resume_batch.setObjectName("resume_batch")
        self.epoch = QtWidgets.QLabel(parent=self.hyper_param)
        self.epoch.setGeometry(QtCore.QRect(20, 120, 71, 30))
        self.epoch.setObjectName("epoch")
        self.epoch_text = QtWidgets.QLineEdit(parent=self.hyper_param)
        self.epoch_text.setGeometry(QtCore.QRect(100, 120, 91, 30))
        self.epoch_text.setObjectName("epoch_text")
        self.resume_epoch = QtWidgets.QPushButton(parent=self.hyper_param)
        self.resume_epoch.setGeometry(QtCore.QRect(200, 120, 31, 30))
        self.resume_epoch.setObjectName("resume_epoch")
        self.settings = QtWidgets.QGroupBox(parent=self.centralwidget)
        self.settings.setGeometry(QtCore.QRect(330, 20, 251, 281))
        self.settings.setObjectName("settings")
        self.result_text = QtWidgets.QLineEdit(parent=self.settings)
        self.result_text.setGeometry(QtCore.QRect(110, 40, 121, 30))
        self.result_text.setReadOnly(True)
        self.result_text.setObjectName("result_text")
        self.result_path = QtWidgets.QLabel(parent=self.settings)
        self.result_path.setGeometry(QtCore.QRect(20, 40, 61, 30))
        self.result_path.setObjectName("result_path")
        self.data_path = QtWidgets.QLabel(parent=self.settings)
        self.data_path.setGeometry(QtCore.QRect(20, 80, 81, 30))
        self.data_path.setObjectName("data_path")
        self.data_text = QtWidgets.QLineEdit(parent=self.settings)
        self.data_text.setGeometry(QtCore.QRect(110, 80, 121, 30))
        self.data_text.setReadOnly(True)
        self.data_text.setObjectName("data_text")
        self.gpu = QtWidgets.QLabel(parent=self.settings)
        self.gpu.setGeometry(QtCore.QRect(20, 160, 71, 30))
        self.gpu.setObjectName("gpu")
        self.gpu_true = QtWidgets.QLineEdit(parent=self.settings)
        self.gpu_true.setGeometry(QtCore.QRect(110, 160, 121, 30))
        self.gpu_true.setReadOnly(True)
        self.gpu_true.setObjectName("gpu_true")
        self.train = QtWidgets.QLabel(parent=self.settings)
        self.train.setGeometry(QtCore.QRect(20, 200, 81, 30))
        self.train.setObjectName("train")
        self.train_text = QtWidgets.QLineEdit(parent=self.settings)
        self.train_text.setGeometry(QtCore.QRect(110, 200, 121, 30))
        self.train_text.setReadOnly(True)
        self.train_text.setObjectName("train_text")
        self.test = QtWidgets.QLabel(parent=self.settings)
        self.test.setGeometry(QtCore.QRect(20, 240, 81, 30))
        self.test.setObjectName("test")
        self.test_text = QtWidgets.QLineEdit(parent=self.settings)
        self.test_text.setGeometry(QtCore.QRect(110, 240, 121, 30))
        self.test_text.setReadOnly(False)
        self.test_text.setObjectName("test_text")
        self.data_path_2 = QtWidgets.QLabel(parent=self.settings)
        self.data_path_2.setGeometry(QtCore.QRect(20, 120, 81, 30))
        self.data_path_2.setObjectName("data_path_2")
        self.test_path = QtWidgets.QLineEdit(parent=self.settings)
        self.test_path.setGeometry(QtCore.QRect(110, 120, 121, 30))
        self.test_path.setReadOnly(True)
        self.test_path.setObjectName("test_path")
        self.functions = QtWidgets.QGroupBox(parent=self.centralwidget)
        self.functions.setGeometry(QtCore.QRect(240, 490, 251, 201))
        self.functions.setObjectName("functions")
        self.load = QtWidgets.QPushButton(parent=self.functions)
        self.load.setGeometry(QtCore.QRect(20, 30, 88, 27))
        self.load.setObjectName("load")
        self.start = QtWidgets.QPushButton(parent=self.functions)
        self.start.setGeometry(QtCore.QRect(20, 70, 88, 27))
        self.start.setObjectName("start")
        self.pause = QtWidgets.QPushButton(parent=self.functions)
        self.pause.setGeometry(QtCore.QRect(20, 110, 88, 27))
        self.pause.setObjectName("pause")
        self.resume = QtWidgets.QPushButton(parent=self.functions)
        self.resume.setGeometry(QtCore.QRect(20, 150, 88, 27))
        self.resume.setObjectName("resume")
        self.save_checkpoint = QtWidgets.QPushButton(parent=self.functions)
        self.save_checkpoint.setGeometry(QtCore.QRect(140, 30, 88, 27))
        self.save_checkpoint.setObjectName("save_checkpoint")
        self.save_best_model = QtWidgets.QPushButton(parent=self.functions)
        self.save_best_model.setGeometry(QtCore.QRect(140, 70, 88, 27))
        self.save_best_model.setObjectName("save_best_model")
        self.stop = QtWidgets.QPushButton(parent=self.functions)
        self.stop.setGeometry(QtCore.QRect(140, 110, 88, 27))
        self.stop.setObjectName("stop")
        self.final_test = QtWidgets.QPushButton(parent=self.functions)
        self.final_test.setGeometry(QtCore.QRect(140, 150, 88, 27))
        self.final_test.setObjectName("final_test")
        self.process = QtWidgets.QGroupBox(parent=self.centralwidget)
        self.process.setGeometry(QtCore.QRect(520, 310, 671, 381))
        self.process.setObjectName("process")
        self.process_text = QtWidgets.QTextEdit(parent=self.process)
        self.process_text.setGeometry(QtCore.QRect(10, 30, 651, 311))
        self.process_text.setReadOnly(True)
        self.process_text.setObjectName("process_text")
        self.progressBar = QtWidgets.QProgressBar(parent=self.process)
        self.progressBar.setGeometry(QtCore.QRect(10, 350, 651, 23))
        self.progressBar.setProperty("value", 0)
        self.progressBar.setObjectName("progressBar")
        MainWindow.setCentralWidget(self.centralwidget)
        self.statusbar = QtWidgets.QStatusBar(parent=MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "FER2013 Practice"))
        self.cur_model_box.setTitle(_translate("MainWindow", "当前模型"))
        self.cur_model.setHtml(_translate("MainWindow", "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
"<html><head><meta name=\"qrichtext\" content=\"1\" /><meta charset=\"utf-8\" /><style type=\"text/css\">\n"
"p, li { white-space: pre-wrap; }\n"
"hr { height: 1px; border-width: 0; }\n"
"li.unchecked::marker { content: \"\\2610\"; }\n"
"li.checked::marker { content: \"\\2612\"; }\n"
"</style></head><body style=\" font-family:\'ComicShannsMono Nerd Font Mono\'; font-size:10pt; font-weight:400; font-style:normal;\">\n"
"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" background-color:#ffffff;\">模型名称: MLP_1</span></p>\n"
"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" background-color:#ffffff;\">输入层: 输入尺寸=48x48x1</span></p>\n"
"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" background-color:#ffffff;\">隐含层1: 输出=512, 激活=ReLU</span></p>\n"
"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" background-color:#ffffff;\">隐含层2: 输出=128, 激活=ReLU</span></p>\n"
"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" background-color:#ffffff;\">输出层: 输出=7, 激活=Softmax</span></p></body></html>"))
        self.model_box.setTitle(_translate("MainWindow", "模型选择"))
        self.comboBox.setItemText(0, _translate("MainWindow", "MLP_1"))
        self.comboBox.setItemText(1, _translate("MainWindow", "MLP_2"))
        self.comboBox.setItemText(2, _translate("MainWindow", "MLP_3"))
        self.comboBox.setItemText(3, _translate("MainWindow", "MLP_4"))
        self.comboBox.setItemText(4, _translate("MainWindow", "CNN_1"))
        self.comboBox.setItemText(5, _translate("MainWindow", "CNN_2"))
        self.comboBox.setItemText(6, _translate("MainWindow", "CNN_3"))
        self.comboBox.setItemText(7, _translate("MainWindow", "CNN_4"))
        self.textEdit.setHtml(_translate("MainWindow", "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
"<html><head><meta name=\"qrichtext\" content=\"1\" /><meta charset=\"utf-8\" /><style type=\"text/css\">\n"
"p, li { white-space: pre-wrap; }\n"
"hr { height: 1px; border-width: 0; }\n"
"li.unchecked::marker { content: \"\\2610\"; }\n"
"li.checked::marker { content: \"\\2612\"; }\n"
"</style></head><body style=\" font-family:\'ComicShannsMono Nerd Font Mono\'; font-size:10pt; font-weight:400; font-style:normal;\">\n"
"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-family:\'Ubuntu Sans\'; font-size:11pt;\">多层感知器</span></p>\n"
"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-family:\'Ubuntu Sans\'; font-size:11pt;\">(Multilayer Perceptron, MLP)</span></p>\n"
"<p style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px; font-family:\'Ubuntu Sans\'; font-size:11pt;\"><br /></p>\n"
"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-family:\'Ubuntu Sans\'; font-size:11pt;\">卷积神经网络</span></p>\n"
"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-family:\'Ubuntu Sans\'; font-size:11pt;\">(Convolutional Neural Network, CNN)</span></p></body></html>"))
        self.framework.setTitle(_translate("MainWindow", "开发框架"))
        self.pytorch.setText(_translate("MainWindow", "PyTorch"))
        self.tensorflow.setText(_translate("MainWindow", "Tensorflow"))
        self.paddlepaddle.setText(_translate("MainWindow", "PaddlePaddle"))
        self.label.setText(_translate("MainWindow", "Scikit-Learn"))
        self.optimizer.setTitle(_translate("MainWindow", "优化器"))
        self.adam.setText(_translate("MainWindow", "Adam"))
        self.adam8.setText(_translate("MainWindow", "AdamW"))
        self.sgd.setText(_translate("MainWindow", "SGD"))
        self.adagrad.setText(_translate("MainWindow", "Adagrad"))
        self.momentum.setText(_translate("MainWindow", "Adamax"))
        self.hyper_param.setTitle(_translate("MainWindow", "超参数(后面按钮还原默认值)"))
        self.lr_text.setText(_translate("MainWindow", "0.001"))
        self.learning_rate.setText(_translate("MainWindow", "学习率"))
        self.resume_lr.setText(_translate("MainWindow", "C"))
        self.batch.setText(_translate("MainWindow", "批次大小"))
        self.batch_text.setText(_translate("MainWindow", "32"))
        self.resume_batch.setText(_translate("MainWindow", "C"))
        self.epoch.setText(_translate("MainWindow", "训练轮数"))
        self.epoch_text.setText(_translate("MainWindow", "25"))
        self.resume_epoch.setText(_translate("MainWindow", "C"))
        self.settings.setTitle(_translate("MainWindow", "系统设置"))
        self.result_text.setText(_translate("MainWindow", "models/ROC/ models/result_*/"))
        self.result_path.setText(_translate("MainWindow", "结果路径"))
        self.data_path.setText(_translate("MainWindow", "数据集路径"))
        self.data_text.setText(_translate("MainWindow", "csvs/fer2013.csv"))
        self.gpu.setText(_translate("MainWindow", "启用GPU"))
        self.gpu_true.setText(_translate("MainWindow", "False"))
        self.train.setText(_translate("MainWindow", "训练集比例"))
        self.train_text.setText(_translate("MainWindow", "0.8"))
        self.test.setText(_translate("MainWindow", "测试集比例"))
        self.test_text.setText(_translate("MainWindow", "0.2"))
        self.data_path_2.setText(_translate("MainWindow", "测试路径"))
        self.test_path.setText(_translate("MainWindow", "to_be_predicted/"))
        self.functions.setTitle(_translate("MainWindow", "功能区"))
        self.load.setText(_translate("MainWindow", "载入模型"))
        self.start.setText(_translate("MainWindow", "开始训练"))
        self.pause.setText(_translate("MainWindow", "暂停训练"))
        self.resume.setText(_translate("MainWindow", "恢复训练"))
        self.save_checkpoint.setText(_translate("MainWindow", "断点保存"))
        self.save_best_model.setText(_translate("MainWindow", "最优保存"))
        self.stop.setText(_translate("MainWindow", "停止训练"))
        self.final_test.setText(_translate("MainWindow", "模型测试"))
        self.process.setTitle(_translate("MainWindow", "训练过程"))
